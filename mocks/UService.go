// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	users "chapter1/internal/features/users"
)

// UService is an autogenerated mock type for the UService type
type UService struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: userID, memberID
func (_m *UService) DeleteUser(userID uint, memberID uint) error {
	ret := _m.Called(userID, memberID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: userID, limit, page, search
func (_m *UService) GetAllUsers(userID uint, limit int, page int, search string) ([]users.User, int, error) {
	ret := _m.Called(userID, limit, page, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []users.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int, string) ([]users.User, int, error)); ok {
		return rf(userID, limit, page, search)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int, string) []users.User); ok {
		r0 = rf(userID, limit, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int, string) int); ok {
		r1 = rf(userID, limit, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int, string) error); ok {
		r2 = rf(userID, limit, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByID provides a mock function with given fields: userID
func (_m *UService) GetUserByID(userID uint) (users.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) users.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UService) Login(email string, password string) (users.User, string, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 users.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (users.User, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: newAdmins, src, filename
func (_m *UService) Register(newAdmins users.User, src multipart.File, filename string) error {
	ret := _m.Called(newAdmins, src, filename)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(users.User, multipart.File, string) error); ok {
		r0 = rf(newAdmins, src, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: userID, updatedUser, src, filename
func (_m *UService) UpdateUser(userID uint, updatedUser users.User, src multipart.File, filename string) error {
	ret := _m.Called(userID, updatedUser, src, filename)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.User, multipart.File, string) error); ok {
		r0 = rf(userID, updatedUser, src, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUService creates a new instance of UService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UService {
	mock := &UService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
