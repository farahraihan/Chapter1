// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	users "chapter1/internal/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UQuery is an autogenerated mock type for the UQuery type
type UQuery struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: userID
func (_m *UQuery) DeleteUser(userID uint) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: limit, page, search
func (_m *UQuery) GetAllUsers(limit int, page int, search string) ([]users.User, int, error) {
	ret := _m.Called(limit, page, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []users.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]users.User, int, error)); ok {
		return rf(limit, page, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []users.User); ok {
		r0 = rf(limit, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int); ok {
		r1 = rf(limit, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(limit, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByID provides a mock function with given fields: userID
func (_m *UQuery) GetUserByID(userID uint) (users.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) users.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAdmin provides a mock function with given fields: userID
func (_m *UQuery) IsAdmin(userID uint) (bool, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (bool, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email
func (_m *UQuery) Login(email string) (users.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) users.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newAdmins
func (_m *UQuery) Register(newAdmins users.User) error {
	ret := _m.Called(newAdmins)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(users.User) error); ok {
		r0 = rf(newAdmins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: userID, updatedUser
func (_m *UQuery) UpdateUser(userID uint, updatedUser users.User) error {
	ret := _m.Called(userID, updatedUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.User) error); ok {
		r0 = rf(userID, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUQuery creates a new instance of UQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *UQuery {
	mock := &UQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
